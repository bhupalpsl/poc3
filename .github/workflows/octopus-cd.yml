name: Deploy to ECS

on:
    workflow_run:
      workflows: ["Build and Push Docker Image"]
      types:
        - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Update ECS Service
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION }})
          NEW_TASK_DEFINTION=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE_URI $IMAGE_URI '.taskDefinition | .containerDefinitions[0].image=$IMAGE_URI | del(.revision, .status, .taskDefinitionArn, .requiresAttributes, .registeredBy, .registeredAt)')
          NEW_TASK_DEFINTION=$(jq -n --argjson t "$NEW_TASK_DEFINTION" '{"family": $t.family, "containerDefinitions": $t.containerDefinitions}')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINTION"
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment  